@model app.Models.Tool

@inject UserManager<ApplicationUser> UserManager

@{
    ViewData["Title"] = "Details";

    var isAdmin = User.IsInRole("Admin") ? "true" : "false";
}

<h2>Detaljer</h2>

<div id="app" v-cloak>
    <h4 style="display: inline-block;">@Model.Name</h4>
    <span class="glyphicon" aria-hidden="true"
          v-on:click="toggleFavorite"
          v-bind:class="{ 'glyphicon-star': favorite, 'glyphicon-star-empty' : !favorite}">
    </span>
    <hr />
    @if (Model.Image != "")
    {
        <img src="~/@Model.Image" style="">
    }
    else
    {
        <span class="glyphicon glyphicon-wrench" style="font-size: 100px;" aria-hidden="true"></span>
    }
    <dl class="dl-horizontal">
        <dt>
            @Html.DisplayNameFor(model => model.Status)
        </dt>
        <dd>            
            <template v-if="tool">
                <i v-bind:style="tool.status.style" v-bind:class="tool.status.glyphicon"></i> {{tool.status.statusName}}
            </template>
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Shelf)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Shelf)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Reports)
        </dt>
        @if (!Model.Reports.Any())
        {
            <dd></dd>
        }
        else
        {
           @foreach (var report in Model.Reports)
            {
                @if (!report.isResolved)
                {
                    <dd>
                    - @report.Error
                    @if (@report.UserId == @UserManager.GetUserId(User) || User.IsInRole("Admin"))
                    {
                        <a asp-controller="Report" asp-action="Edit" asp-route-id="@report.Id">Edit</a> @Html.Raw("|")
                        <a asp-controller="Report" asp-action="Details" asp-route-id="@report.Id">Details</a> @Html.Raw("|")
                        <a asp-controller="Report" asp-action="Delete" asp-route-id="@report.Id">Delete</a> 
                    }
                    </dd>
                }
            }
        }
        <dt>
            @Html.DisplayNameFor(model => model.Alarms)
        </dt>
        @if (!Model.Alarms.Any())
        {
            <dd></dd>
        }
        else
        {
            @foreach (var alarm in Model.Alarms)
            {
                <dd>
                    - @alarm.Name: @alarm.Date
                    @if (User.IsInRole("Admin"))
                    {
                        <a asp-controller="Alarms" asp-action="Edit" asp-route-id="@alarm.Id">Edit</a> @Html.Raw("|")
                        <a asp-controller="Alarms" asp-action="Details" asp-route-id="@alarm.Id">Details</a> @Html.Raw("|")
                        <a asp-controller="Alarms" asp-action="Delete" asp-route-id="@alarm.Id">Delete</a>
                    }
                </dd>
            }
        }
    </dl>

    <div class="buttons">
        <!-- Button to trigger reservation dialog to popup -->
        <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#reservationDialog">
            Reservér
        </button>
        
        <button type="button" class="btn btn-success" v-on:click="checkIn(@Model.Id)" 
                v-if="currentOwnerId == '@UserManager.GetUserId(User)'">
            Sjekk inn
        </button>
        
        <button type="button" class="btn btn-danger" v-on:click="checkOut(@Model.Id)" 
                v-if="currentOwnerId == 'No owner'">
            Sjekk ut
        </button>

        <a href="/Report/Create/@Model.Id" class="btn btn-warning">Rapporter feil</a>

        @if (User.IsInRole("Admin"))
        {
            <a href="/Alarms/Create/@Model.Id" class="btn btn-info">Registrer alarm</a>
        }
    </div>

    <br>
    <a asp-action="Index">Tilbake til verktøyliste</a>
    
    <hr />
    <div id="calendar"></div>
    <hr />

    <h3>Logg</h3>
    <table class="table table-hover table-striped">
        <thead>
            <tr>
                <th>Brukt av</th>
                <th>Start</th>
                <th>Slutt</th>
            </tr>
        </thead>
        <tbody>
            <tr v-for="l in logs">
                <td>{{ l.user.userName }}</td>
                <td>{{ l.fromDate }}</td>
                <td>{{ l.toDate }}</td>
            </tr>
        </tbody>
    </table>
    
    <!-- Reservation dialog -->
    @await Html.PartialAsync("ReserveDialogPartial", new app.Models.Reservation())
    
    <!-- Confirmation dialog -->
    @await Html.PartialAsync("ConfirmDialogPartial")
</div>

<style>
    .buttons .btn {
        margin-top: 5px;
    }
</style>

@section Styles
{
    <link rel='stylesheet' href='~/lib/fullcalendar/fullcalendar.min.css' />
    <link rel='stylesheet' href='~/lib/qtip2/3.0.3/jquery.qtip.min.css' />
}

@section Scripts
{
<script src='~/lib/fullcalendar/lib/moment.min.js'></script>
<script src='~/lib/fullcalendar/fullcalendar.min.js'></script>
<script src='~/lib/fullcalendar/locale/nb.js'></script>
<script src='~/lib/qtip2/3.0.3/jquery.qtip.min.js'></script>

<!-- Script for custom confirmation dialog -->
<environment include="Development">
    <script src="~/js/confirm-dialog.js"></script>
</environment>
<environment exclude="Development">
    <script src="~/js/confirm-dialog.min.js"></script>
</environment>

<!-- Script for calendar (with qTip2 tooltips) -->
<script>
var UserName = "@UserManager.GetUserName(User)";
var isAdmin = @isAdmin;
$(function() {
    var tooltip = $('<div/>').qtip({
        id: 'fullcalendar',
        content: {
            text: ' ',
            title: {
                button: true
            }
        },
        position: {
            my: 'bottom center',
            at: 'top center',
            target: 'event',
            viewport: $('#calendar'),
            adjust: {
                mouse: false,
                scroll: false
            }
        },
        show: false,
        hide: false,
        style: 'qtip-light'
    }).qtip('api');


    // Load calendar
    $('#calendar').fullCalendar({
        // put your options and callbacks here

        header: {
            left: '',
            center: 'title',
            right: 'month,agendaWeek today prev,next'
        },
        slotDuration: '02:00:00',
        agendaEventMinHeight: '25',

        events: '/api/Reservations/cal/@Model.Id',
        contentHeight: 400,
        eventClick: function(calEvent, jsEvent, view) {
            // Set up tooltip content
			var content = '<h4>Reservert av '+calEvent.title+'</h4>' + 
				'<p><b>Start:</b> '+calEvent.start.format("dddd, Do. MMMM YYYY, h:mm:ss")+'<br />' + 
				(calEvent.end && '<p><b>Slutt:</b> '+calEvent.end.format("dddd, Do. MMMM YYYY, h:mm:ss")+'</p>' || '') +
                (calEvent.user.userName == UserName || isAdmin ? '<button data-id='+calEvent.id+' class="btn btn-default">Slett reservasjon</button>' : '');
			tooltip.set({
				'content.text': content
			})
			.reposition(jsEvent).show(jsEvent);

            // Set up an event-handler for the delete reservations button in the tooltip
            var content = tooltip.elements.content;
            $('button', content).click(function() {
                tooltip.hide();

                var id = $(this).data('id');
                var dialogOpts = { title: 'Slett reservasjon', message: 'Er du sikker på at du vil slette reservasjonen?' }
                ConfirmDialog(dialogOpts, function(){
                    axios.delete('/api/reservations/' + id).then(function(response) {
                        if (response.status == 200) {
                            $("#calendar").fullCalendar('refetchEvents');
                        }
                    });
                });
            }); 
        },
        dayClick: function() { tooltip.hide() },
		eventResizeStart: function() { tooltip.hide() },
		eventDragStart: function() { tooltip.hide() },
		viewDisplay: function() { tooltip.hide() },
    })
});
</script>

<script>
var app = new Vue({
    el: '#app',
    data: {
        faviconhover: false,
        favorite: false,
        currentOwnerId: "@Model.CurrentOwnerId",
        reservations: [],
        logs: [],
        reservationForm: {
            UserName: '',
            FromDate: '',
            ToDate: ''
        },
        tool: ''
    },
    created: function () {
        this.loadReservations();
        this.loadLogs();

        var self = this;
        axios.get('/api/favorites')
        .then(function (response) {
            for (var i = 0; i < response.data.length; i++) {
                if (response.data[i].toolId == @Model.Id) {
                    self.favorite = true;
                    return;
                }
            }
        }); 

        axios.get('/api/tools/@Model.Id')
        .then(function (response) {
            self.tool = response.data;
        });
    },
    methods: {
        loadReservations: function() {
            var self = this;

            // Fetch list of reservations
            axios.get('/api/reservations/?toolid=@Model.Id')
            .then(function (response) {
                self.reservations = response.data;
            }); 
        },
        loadLogs: function() {
            var self = this;

            // Fetch list of logs
            axios.get('/api/logs/?toolid=@Model.Id')
            .then(function (response) {
                
                response.data.forEach(function(log) {
                    var fromDateUTC = new Date(log.fromDate);
                    var toDateUTC = new Date(log.toDate);

                    var offset = fromDateUTC.getTimezoneOffset();

                    // Convert UTC times from the server to local times
                    var fromDateLocal = new Date(fromDateUTC.getTime() - offset*60000);
                    var toDateLocal = new Date(toDateUTC.getTime() - offset*60000);

                    log.fromDate = fromDateLocal.toLocaleString();
                    log.toDate = toDateLocal.toLocaleString();

                    if (log.fromDate == log.toDate)
                        log.toDate = '...';
                })

                self.logs = response.data;

                // Reverse the logs in order to get the newest logs on the bottom 
                self.logs.reverse();
            }); 
        },
        saveReservation: function() {
            var self = this;

            var data = {
                ToolId: @Model.Id,
                User: { UserName: this.reservationForm.UserName },
                FromDate: this.reservationForm.FromDate,
                ToDate: this.reservationForm.ToDate
            };

            var stopLoop = false;

            // If there currently are no reservations for the tool, a user is free to reserve the tool
            if (self.reservations.length == 0)
            {
                self.postReservation(data);
            }
            else {
                for (var i = 0; i < self.reservations.length; i++)
                {
                    var reservation = self.reservations[i];

                    if (stopLoop)
                        break;

                    if (data.User.UserName == "")
                    {
                        data.User.UserName = '@UserManager.GetUserName(User)';
                    }

                    // A user can create a reservation on top of one of his/her own reservations
                    if (reservation.user.userName == data.User.UserName
                    && reservation != self.reservations[self.reservations.length - 1])
                        continue;

                    if (reservation.user.userName == data.User.UserName
                    && reservation == self.reservations[self.reservations.length - 1])
                    {
                        self.postReservation(data);

                        break;
                    }

                    var toDate = new Date(reservation.toDate);    
                    var fromDate = new Date(reservation.fromDate);

                    var toDateData = new Date(data.ToDate);
                    var fromDateData = new Date(data.FromDate);

                    // If a user tries to reserve a tool, but the tool is currently reserved for someone else, he/she gets an error-message
                    if (fromDate.getTime() <= toDateData.getTime() 
                    && toDate.getTime() >= fromDateData.getTime())
                    {
                        var options = {
                                title: 'Allerede reservert for en annen bruker',
                                message: 'Dette verktøyet er allerede reservert for ' + reservation.user.userName + 
                                         ' fra og med ' + fromDate.toLocaleString() + ' til og med ' + toDate.toLocaleString() + '.',
                                dismissBtn: "Ingen",
                                confirmBtn: "OK"
                            }

                        ConfirmDialog(options, function(){})
                        
                        stopLoop = true;
                    }

                    if (reservation == self.reservations[self.reservations.length - 1] && !stopLoop)
                    {
                        self.postReservation(data);
                    }
                }
            }
        },
        cancelReservation: function() {
            $('#reservationDialog').modal('hide');
            this.reservationForm.UserName = '';
            this.reservationForm.FromDate = '';
            this.reservationForm.ToDate = '';
        },
        toggleFavorite: function() {
            var self = this;

            if (!this.favorite) {
                axios.post('/api/Favorites', JSON.stringify({ toolid: @Model.Id }), { headers: { 'Content-Type': 'application/json' }})
                .then(function (response) {
                    if (response.status == 201)
                        self.favorite = true;
                });
            }
            else {
                axios.delete('/api/Favorites', { data: JSON.stringify({ toolid: @Model.Id }), headers: { 'Content-Type': 'application/json' }})
                .then(function (response) {
                    if (response.status == 200)
                        self.favorite = false;
                });
            }
        },
        checkOut: function(id) {
            var self = this;

            var currentDate = new Date();

            var stopLoop = false;

            // If there currently are no reservations for the tool, a user is free to check out the tool
            if (self.reservations.length == 0)
                self.checkOutTool(id);
            else {
                for (var i = 0; i < self.reservations.length; i++)
                {
                    var reservation = self.reservations[i];

                    if (stopLoop)
                        break;

                    if (reservation.userId == '@UserManager.GetUserId(User)'
                    && reservation != self.reservations[self.reservations.length - 1])
                        continue;

                    if (reservation.userId == '@UserManager.GetUserId(User)'
                    && reservation == self.reservations[self.reservations.length - 1])
                    {
                        self.checkOutTool(id);

                        break;
                    }

                    var toDate = new Date(reservation.toDate);    
                    var fromDate = new Date(reservation.fromDate);    

                    // If a user tries to check out a tool, but the tool is currently reserved for someone else, he/she gets a warning
                    if (currentDate.getTime() <= toDate.getTime() 
                    && currentDate.getTime() >= fromDate.getTime())
                    {       
                            var options = {
                                title: 'Advarsel',
                                message: 'Dette verktøyet er reservert av ' + reservation.user.userName + '. Er du sikker på at du vil sjekke ut verktøyet?'
                            }

                            ConfirmDialog(options, function(){
                                self.checkOutTool(id);
                            })
                        
                        stopLoop = true;
                    }

                    if (reservation == self.reservations[self.reservations.length - 1] && !stopLoop)
                        self.checkOutTool(id);
                }
            }
        },
        checkIn: function(id) {
            var self = this;

            axios.put('/api/Tools/' + id + '/checkin')
            .then(function (response){
                if (response.status == 200)
                {
                    self.currentOwnerId = 'No owner';
                    self.tool.status = response.data.status;
                    self.loadLogs();
                }
            });
        },
        checkOutTool: function(id) {
            var self = this;

            axios.put('/api/Tools/' + id + '/checkout')
            .then(function (response){
                if (response.status == 200)
                {
                    self.currentOwnerId = '@UserManager.GetUserId(User)';
                    self.tool.status = response.data.status;
                    self.loadLogs();
                }
            });
        },
        postReservation: function(data) {
            var self = this;

            axios.post('/api/reservations', JSON.stringify(data), { headers: { 'content-type': 'application/json; charset=utf-8' } })
                .then(function (response) {
                    if (response.status == 201)
                        $('#reservationDialog').modal('hide');

                        // TODO: Error reporting

                        // Reload reservations
                        $("#calendar").fullCalendar('refetchEvents');
                        self.loadReservations();
                    });
        }
    }
})
</script>
}