@model IEnumerable<app.Models.Tool>

@section Styles
{
    <environment include="Development">
        <link rel="stylesheet" href="~/css/toolList.css" asp-append-version="true"/>
    </environment>
    <environment exclude="Development">
        <link rel="stylesheet" href="~/css/toolList.min.css" asp-append-version="true"/>
    </environment>
}

@{
    ViewData["Title"] = "Tool-List";
}

<div id="app" v-cloak>

<h2>Tool-List</h2>

@if (User.IsInRole("Admin"))
{
    <p><a asp-action="Create">Add Tool</a></p>
}

<!--Search tools-->
<form class="form-inline" role="form">
  <div class="form-group has-feedback">
    <input type="text" class="form-control" id="search" placeholder="Search tools" v-model="search">
    <span class="glyphicon glyphicon-search form-control-feedback"></span>
  </div>
</form>

<table class="table table-hover table-striped">
    <thead> 
        <tr>
            <th>@Html.DisplayNameFor(model => model.Name)</th>
            <th>@Html.DisplayNameFor(model => model.Status)</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        <tr v-for="tool in filteredTools">
            <td>{{ tool.name }}</td>
            <td>{{ tool.status }}</td>
            @if (User.IsInRole("Admin")) {
                <td>
                    <a v-bind:href="'Tool/Edit/' + tool.id">Edit</a> @Html.Raw("|")
                    <a v-bind:href="'Tool/Details/' + tool.id">Details</a> @Html.Raw("|")
                    <a v-bind:href="'Tool/Delete/' + tool.id">Delete</a>
                </td>
            }
            else 
            {
                <td>
                    <a v-bind:href="'Tool/Details/' + tool.id">Details</a>
                </td>   
            }
        </tr>
    </tbody>
</table>
</div>

@section Scripts {
<script>
var app = new Vue({
    el: '#app',
    data: {
        tools: [],
        search: ''
    },
    created: function () {
        var self = this;
        axios.get('/api/tools')
        .then(function (response) { 
        self.tools = response.data; 
        });    
    },
    computed: {
        filteredTools: function() {
            return this.tools.filter((tool) => {
                return tool.name.toLowerCase().match(this.search.toLowerCase());
            })
        }
    },
    methods: {

    }
})
</script>
}