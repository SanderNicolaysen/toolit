@model IEnumerable<app.Models.Tool>

@{
    ViewData["Title"] = "Tool-List";
}

<div id="app" v-cloak>

<h2>Tool-List</h2>

@if (User.IsInRole("Admin"))
{

    <h3>Admin tools</h3>
    <p><a asp-action="Create">Add Tool</a></p>
    
    <button v-on:click="isHidden = !isHidden">Toggle shelf numbers</button>
    <hr></hr>
}

<!--Search tools-->
<form v-on:submit.prevent="onSubmit" class="form-inline" role="form">
  <div class="form-group has-feedback">
    <input type="text" class="form-control" id="search" placeholder="Search tools" v-model="search" autocomplete="off">
    <span class="glyphicon glyphicon-search form-control-feedback"></span>
  </div>
</form>

<table id="tool-table" class="table table-hover table-striped">
    <thead> 
        <tr>
            <th></th>
            <th>@Html.DisplayNameFor(model => model.Name)</th>
            <th>@Html.DisplayNameFor(model => model.Status)</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        <tr v-for="tool in filteredTools">
            <td class="fit">
                <img v-if="tool.thumbnail" v-bind:src="tool.thumbnail" alt="oh">
            </td>
            <td><a v-bind:href="'Tool/Details/' + tool.id">{{ tool.name }}</a></td>
            <td><i :style="tool.status.style" :class="tool.status.glyphicon"></i> {{ tool.status.statusName }}</td>
            <td><p v-if="isHidden">Shelf: {{ tool.shelf }}</p></td>
            <td><p v-else=no></td>
            <td>
                <span class="glyphicon" style="font-size:17px" aria-hidden="true"
                    v-on:click="toggleFavorite(tool)"
                    v-bind:class="{ 'glyphicon-star': tool.favorite, 'glyphicon-star-empty' : !tool.favorite }">
                </span>
            </td>
            @if (User.IsInRole("Admin")) 
            {
                <td class="fit">
                    <div class="dropdown">
                        <button id="more-btn" class="btn btn-default dropdown-toggle btn-sm" type="button" data-toggle="dropdown">
                            <span class="more-dot"></span>
                            <span class="more-dot"></span>
                            <span class="more-dot"></span>
                        </button>
                        <ul class="dropdown-menu">
                            <li><a v-bind:href="'Tool/Edit/' + tool.id">Edit</a></li>
                            <li><a v-bind:href="'Tool/Delete/' + tool.id">Delete</a></li>
                        </ul>
                    </div>
                </td>
            }
        </tr>
    </tbody>
</table>
</div>

@section Scripts {
<script>
var app = new Vue({
    el: '#app',
    data: {
        isHidden: false,
        tools: [],
        search: ''
    },
    created: function () {
        var self = this;
        axios.get('/api/tools')
        .then(function (response) { 
            for (var i = 0; i < response.data.length; i++) {
                // Vue.set(self.tools[i], favorite, false);
                response.data[i].favorite = false;
            }
            self.tools = response.data; 
            axios.get('/api/favorites')
            .then(function (response) {
                for (var i = 0; i < response.data.length; i++) {
                    for (var j = 0; j < self.tools.length; j++) {
                        if (response.data[i].toolId == self.tools[j].id) {
                            self.tools[j].favorite = true;
                            continue;
                        }
                    }
                }
            }); 
        });
    },
    computed: {
        filteredTools: function() {
            return this.tools.filter((tool) => {
                return tool.name.toLowerCase().match(this.search.toLowerCase()) || tool.alias.toLowerCase().match(this.search.toLowerCase());
            });
        }
    },
    methods: {
        onSubmit: function() {
            // If there is only one tool in the search results, navigate to it on submit
            if (this.filteredTools.length == 1)
            {
                window.location.href = "/Tool/Details/" + this.filteredTools[0].id;
            }
        },
        toggleFavorite: function(tool) {
            var self = this;

            if (!tool.favorite) {
                axios.post('/api/Favorites', JSON.stringify({ toolid: tool.id }), { headers: { 'Content-Type': 'application/json' }})
                .then(function (response) {
                    if (response.status == 201)                        
                        tool.favorite = true;
                });
            }
            else {
                axios.delete('/api/Favorites', { data: JSON.stringify({ toolid: tool.id }), headers: { 'Content-Type': 'application/json' }})
                .then(function (response) {
                    if (response.status == 200)
                        tool.favorite = false;
                });
            }
        }
    },
})
</script>
}